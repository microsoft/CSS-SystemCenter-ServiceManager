<# TODO: TESTS:
all files should only have function DECLARATIONS
Write-Output  should never appear
Exit should never appear other than in SelfElevate and comments
#>

#region function declarations
function ParseAndValidateScript([string]$pScriptFileFullPath) { 

    $result = $false 

    [System.Management.Automation.Language.Token[]]$tokens = $null
    [System.Management.Automation.Language.ParseError[]]$parseErrors = $null
    $p = [System.Management.Automation.Language.Parser]::ParseFile($pScriptFileFullPath,[ref]$tokens,[ref]$parseErrors) 
    if($parseErrors.Count -eq 0){
        Write-Host "Validating: PASS"
        return $true
    }
    else {
       throw "Script is not valid !!! Parse Errors:`n $parseErrors"
    }
}
#endregion 

#region resetting the PS environment
Set-StrictMode -Version 1.0
Remove-Variable * -ErrorAction SilentlyContinue -Exclude PSDefaultParameterValues; 
Remove-Module *; 
$error.Clear(); 
Get-job | Remove-Job
$host.privatedata.ErrorForegroundColor ="DarkGray"  # For accessibility
#endregion 

#region params
$sourceStartingScriptFolderName = 'SourceCode'
$sourceStartingScriptFileName = 'main.ps1'
$targetBuildFolderName = 'LastBuild'
$targetScriptFileName = 'SCSM-Diagnostic-Tool.ps1'
$Output_BuildFolderName = "Output_Build"
$invalidBuildScriptFileName = "$Output_BuildFolderName\InvalidBuild_$sourceStartingScriptFileName"
$transcriptFileName = "$Output_BuildFolderName\Build_Transcript.txt"
$targetVersionFolderName = '..'
$versionFileName = "version.txt"
#endregion

#region Starting Transcripting
$transcriptFilePath = Join-Path -Path $PSScriptRoot -ChildPath $transcriptFileName
Start-Transcript -Path $transcriptFilePath | Out-Null
#endregion

try {
    #region init 
    Set-Location $PSScriptRoot 
    $parentPath = Split-Path -Path (Get-Location) -Parent
    $sourceStartingFolderPath = Join-Path -Path $parentPath -ChildPath $sourceStartingScriptFolderName 
    $sourceStartingScriptFilePath = $sourceStartingFolderPath| Join-Path -ChildPath $sourceStartingScriptFileName
    $versionFilePath = Join-Path -Path $parentPath -ChildPath $versionFileName
    $successFilePath = Join-Path -Path $parentPath -ChildPath $targetBuildFolderName | Join-Path -ChildPath $targetScriptFileName
    $invalidFilePath = Join-Path -Path $PSScriptRoot -ChildPath $invalidBuildScriptFileName

    $currentVersionStr = (Get-Content -Path $versionFilePath | Out-String).Trim()
    Write-Host "Build started for Version $currentVersionStr"
    Write-Host "Source folder: $sourceStartingFolderPath"
    Write-Host "--------------------------------"
    #endregion

    #region First, building into "Invalid" file

    $buildResultSB = [System.Text.StringBuilder]::new()

    #region Creating "invalid file", starting with ScriptFileInfo
    $Parms = @{
        Path = $invalidFilePath
        Version = $currentVersionStr
        Author = "Microsoft System Center Support Team"
        Description = "This script collects diagnostic information from your SCSM environment to help you and Microsoft Support to resolve technical issues faster"
        Company = "Microsoft Customer Support Services (CSS)"
    }
    New-ScriptFileInfo @Parms
    $buildResultSB.AppendLine( "# This file is generated by a tool. Do not make changes. They will be overridden by the tool." ) | Out-Null
    $buildResultSB.AppendLine( (Get-Content -Path $invalidFilePath | Out-String) ) | Out-Null

        #region Adding Version function
        $versionFunctionStr = "function GetToolVersion() {'$currentVersionStr'}"
        $buildResultSB.AppendLine( $versionFunctionStr ) | Out-Null #endregion

        #region Get all PS1 files
        $allPS1Files = Get-ChildItem -Path $sourceStartingFolderPath -Filter *.ps1 -Recurse 
        foreach ($PS1File in $allPS1Files){
            Write-Host $PS1File.FullName.Replace($sourceStartingFolderPath,''); 
            $buildResultSB.AppendLine( (Get-Content $PS1File.FullName | Out-String) ) | Out-Null  
        }
        #endregion
    
        #region Adding call to main()
        $buildResultSB.AppendLine( "main;" ) | Out-Null #endregion

    $buildResultStr = $buildResultSB.ToString()

    #region Overwriting "invalid file" with complete build result (including scriptFileInfo)
    Set-Content -Path $invalidFilePath -Value $buildResultStr #endregion

    #endregion

    #region Post-Build stuff, testing etc. Pass $invalidFilePath or $buildResultStr
    $buildResultStrIsGood = $true
    Write-Host " "
    Write-Host "Post-Build"
    Write-Host "--------------------------------"

    Set-Location $PSScriptRoot 
    
    #Parse and Validate
    $buildResultStrIsGood =  $buildResultStrIsGood -and (ParseAndValidateScript $invalidFilePath)

    #add more testings below as: 
    #$buildResultStrIsGood = $buildResultStrIsGood -and (SomeOtherTestHere $buildResultStr)      

    #endregion

    #region Final stuff
    Write-Host " "
    if ( $Error.Count -eq 0 -and $buildResultStrIsGood) {

        #region cleaning the target
        if (Test-Path $successFilePath) {Remove-Item -Path $successFilePath} #endregion

        #region rename invalidFile and move to last build
        Move-Item -Path $invalidFilePath -Destination $successFilePath -Force #endregion
        
        #region duplicate as .TXT to easily share via email, until the .PS1 gets directly published on internet
#        Copy-Item -Path $successFilePath -Destination ($successFilePath.Replace('.ps1','.txt')) -Force #endregion

        #region Increasing Version in Dev.
        [System.Version]$currentVersion = [System.Version]::Parse($currentVersionStr)   
        $nextVersion = [System.Version]::new($currentVersion.Major, $currentVersion.Minor, $currentVersion.Build, $currentVersion.Revision + 1)
        $nextVersionStr = $nextVersion.ToString()
        Set-Content -Path $versionFilePath -Value $nextVersionStr
        #endregion
        #todo: commit version.txt here into Dev Git?

        Write-Host "Build SUCCEEDED for Version $currentVersionStr. Result is $successFilePath" -ForegroundColor Yellow
    }
    else {    
        throw "Something wrong happened. Error(s): $Error"
    }
    #endregion
} 
catch {
    $_ | fl     # to re-throw
    Write-Error "Build FAILED for Version $currentVersionStr. Check $Output_BuildFolderName folder."
}
finally {
    Stop-Transcript | out-null
    Read-Host " "
}